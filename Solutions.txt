1.	Palindrome check
fn is_palindrome(s: &str) -> bool {
    let s = s.chars().collect::<Vec<char>>(); 
    let n = s.len(); 
    for i in 0..n / 2 { 
        if s[i] != s[n - 1 - i] { 
            return false; 
        }
    }
    true 
}


2.	Finding first occurrence in sorted array (binary search)
fn first_occurrence(arr: &[i32], x: i32) -> Option<usize> {
    let mut low = 0;
    let mut high = arr.len() - 1;
    let mut result = None;

    while low <= high {
        let mid = low + (high - low) / 2;

        if arr[mid] == x {
            result = Some(mid);
            high = mid - 1;
        } else if arr[mid] < x {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    result
}

3.	Find shortest string in of string of words
fn find_shortest_word(s: &str) -> Option<&str> {
    let words: Vec<&str> = s.split_whitespace().collect();
    let mut shortest_word: Option<&str> = None;

    for word in words {
        match shortest_word {
            Some(shortest) => {
                
                if word.len() < shortest.len() {
                    shortest_word = Some(word);
                }
            }
            None => {
                shortest_word = Some(word);
            }
        }
    }

    shortest_word
}

4.	Prime or not
fn is_prime(n: u64) -> bool {
    if n <= 1 {
        return false;
    }
    for i in 2..=(n as f64).sqrt() as u64 {
        if n % i == 0 {
            return false;
        }
    }
    true
}

5.	Median of sorted array
fn find_median(arr: &[i32]) -> f64 {
    let len = arr.len();
    let mid = len / 2;
    if len % 2 == 0 {
        (arr[mid - 1] as f64 + arr[mid] as f64) / 2.0
    } else {
        arr[mid] as f64
    }
}

6.	Longest common prefix:
fn longest_common_prefix(strings: Vec<String>) -> String {
    let len = strings.len();
    if len == 0 {
        return String::new();
    }
    let mut common_prefix = strings[0].clone();
    for i in 1..len {
        while !strings[i].starts_with(&common_prefix) {
            common_prefix.pop();
        }
    }
    common_prefix
}

7.	Kth smallest array
fn kth_smallest(arr: &[i32], k: usize) -> i32 {
    let mut sorted_arr = arr.to_vec();
    sorted_arr.sort();
    sorted_arr[k - 1]
}

8.	Maximum depth of a binary tree
use std::cmp;
struct TreeNode {
    val: i32,
    left: Option<Box<TreeNode>>,
    right: Option<Box<TreeNode>>,
}

impl TreeNode {
    fn new(val: i32) -> Self {
        TreeNode {
            val,
            left: None,
            right: None,
        }
    }
}

fn max_depth(root: Option<Box<TreeNode>>) -> i32 {
    match root {
        None => 0,
        Some(node) => {
            let left_depth = max_depth(node.left);
            let right_depth = max_depth(node.right);
            cmp::max(left_depth, right_depth) + 1
        }
    }
}

9.	String reversal
fn reverse_string(s: String) -> String {
    let mut chars: Vec<char> = s.chars().collect();
    let mut left = 0;
    let mut right = chars.len() - 1;

    while left < right {
        chars.swap(left, right);
        left += 1;
        right -= 1;
    }

    chars.into_iter().collect()
}

10.	Repeated Prime or not
fn is_prime(n: u64) -> bool {
    if n <= 1 {
        return false;
    }
    for i in 2..=(n as f64).sqrt() as u64 {
        if n % i == 0 {
            return false;
        }
    }
    true
}

11.	Merge two sorted arrays in Rust
fn merge_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {
    let mut result = Vec::with_capacity(nums1.len() + nums2.len());
    let (mut i, mut j) = (0, 0);

    while i < nums1.len() && j < nums2.len() {
        if nums1[i] < nums2[j] {
            result.push(nums1[i]);
            i += 1;
        } else {
            result.push(nums2[j]);
            j += 1;
        }
    }

    while i < nums1.len() {
        result.push(nums1[i]);
        i += 1;
    }

    while j < nums2.len() {
        result.push(nums2[j]);
        j += 1;
    }

    result
}

12.	Find the maximum subarray sum in Rust
fn max_subarray_sum(nums: Vec<i32>) -> i32 {
    let mut max_sum = nums[0];
    let mut current_sum = nums[0];

    for i in 1..nums.len() {
        current_sum = std::cmp::max(current_sum + nums[i], nums[i]);
        max_sum = std::cmp::max(max_sum, current_sum);
    }

    max_sum
}




	

